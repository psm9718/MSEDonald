# Ideas

## Burger place

오버쿡드 등의 탑뷰 코옵/멀티/액션 게임에서 착안

버거 음식점 - 타일맵으로 구성

### 캐릭터

로우폴리 3D 캐릭터

캐릭터의 아머처와 애니메이션 개발이 간단하도록, 팔 다리가 둥둥 떠다니는 캐릭터 디자인

-> 카툰 3D 스타일 (마이크로소프트 

-> 토끼로 하면 어떨까



## 시스템 디자인

### 맵, 좌표 등

타일맵을 기반으로 한 화면 하나 정도 크기의 맵

타일맵 크기 1m를 기준으로 물체들을 배치하는 interger 좌표(그리드)와 캐릭터들의 위치를 나타내는 float 좌표

벽과 물체들 모두 1 * 1 사이즈

캐릭터도 약 1 * 1 사이즈


오브젝티브 또는 벽이 아닌 타일의 높이는 약 0.64, 벽 높이 1.5


### 콜라이더

벽과 오브젝티브 전부 1 * 1 * 1 크기의 박스 콜라이더 (타일맵 활용)

캐릭터들 높이 1.5, 지름 1인 캡슐 콜라이더


### 조작

wasd로 움직이기 // -> 방향키

Space 대쉬

J 줍기, 사용 // -> 컨트롤

K 놓기 // -> 컨트롤



## 구조 디자인

### 오브젝티브

#### 범위 감지 콜라이더

구 형태, 반지를 약 1.5

충돌x

캐릭터 콜라이더와 같은 높이에 배치


### 데이터 구조

#### 오브젝티브
메쉬 (튀김기의 모습)
ㄴ 콜라이더 (튀김기의 지형)
ㄴ 오브젝트 
	ㄴ ui 1 (타이머)
	ㄴ ui 2 (타이머2)
	ㄴ ui 3 (말풍선)
	ㄴ 이펙트 1 (튀기는 중인 감튀)
	ㄴ 이펙트 2 (끓는 기름)
	ㄴ 콜라이더 (범위 감지)

#### 캐릭터
캐릭터 (본체 생략)
ㄴ 메쉬 (감튀, 튀김망)
	ㄴ 애니메이션
	ㄴ 추가 이펙트 (튀는 기름)

#### 서버 내부
오브젝티브
ㄴ 상수
	ㄴ 오브젝티브ID : String
	ㄴ 유형 : String 또는 int
ㄴ 변수
	ㄴ 상태 : String
	ㄴ 끝나는 시간 : String
	ㄴ 남은 시간(?) : float

물건
ㄴ 상수
	ㄴ 물건ID : String
	ㄴ 위치(타일) : (int, int)
	ㄴ 상태(들고 있는 캐릭터) : String

플레이어
ㄴ 상수
	ㄴ 캐릭터ID : String
ㄴ 변수
	ㄴ위치 : (float, float)
	ㄴ상태 (들고 있는 물건) : String

AI캐릭터 (P1 클라이언트에서 구동)
ㄴ 변수
	ㄴ 캐릭터ID :String
	ㄴ 위치 : (float, float)
	ㄴ 상태(들고 있는 물건) : String




### 서버와의 통신
클라이언트가 서버에 1초에 60번 보내고 20번 받는 것을 기준으로 함

클라이언트가 연결할 때 보내는 신호
host
123

guest
123

클라이언트가 조작함에 따라 서버로 보내지는 패킷

시간 : String,
캐릭터ID : String,
moved {
	위치 : (float, float),
	},
used {
	오브젝티브ID : String,
	},
put {
	물건ID : String,
	위치(타일) : (int, int)
	}

매틱 서버에서 각 클라이언트로 보내지는 패킷
시간 : String,
host {
	상태 : String,
	위치 : (float, float)
	},
guest {
	상태 : String,
	위치 : (float, float)
	},
AI1 {
	캐릭터ID : String,
	상태 : String,
	}
// 각각 클라이언트에서 필요한 정보만 사용하고 나머지는 버림


필요할 때 추가로 붙어 보내지는 패킷, 신호 유실을 방지하기 위해 여러번 보내질 수 있음

o_started {
	오브젝티브ID : String,
	시작 시간 : String,
	끝나는 시간 : String,
	상태 : String
	},
o_changed {
	오브젝티브ID : String,
	상태 : String
	},
t_changed {
	물건ID : String,
	위치(타일) : (int, int),
	상태 : String
	}



### 패킷 줄이기, 단순화
상대 캐릭터의 방향, 애니메이션은 각 클라이언트에서 알아서 처리
1초에 20번 통신을 기준으로 인터폴레이션

타이머는 시작 신호만 받아 각 클라이언트에서 처리

상태 : String
ID와 호환
앞 글자로 무슨 종류인지 판단 가능 (플레이어, 캐릭터 옵젝트 등에서 사용)

"O123" -> 오브젝티브ID, 사용한 오브젝티브
"T456" -> 물건ID, 내려놓은 물건, 캐릭터가 주운 물건
"C123" -> 캐릭터ID, 물건을 들고 있는 캐릭터
"SReady" -> 상태(state) (오브젝티브, 플레이어, 캐릭터 옵젝트에서 사용)

각 옵젝트 인스턴스는 고유한 ID를 가지고 있고, 각 클라이언트와 서버가 미리 알고 있음(컴파일 전에 부여)



### 멀티플레이 최적화
두 플레이어 또는 AI 캐릭터 사이의 오브젝티브를 최대한 공유하지 않도록 함
실시간 멀티플레이지만 실시간성의 중요함을 최대한 제거 (상대 캐릭터의 위치가 크게 중요하지 않음)

호스트
모든 AI를 구동

게스트
모든 AI캐릭터는 리지드바디이며, 서로 또는 지형과 충돌하지 않고 오직 게스트 캐릭터와만 충돌 (끼임 방지)
각 캐릭터는 1초 20번 통신 기준으로, 위치를 인터폴레이션
통신 레이턴시가 발생하면 레이턴시만큼 빠르게 이동해 따라잡음
통신 빈도가 떨어져도 움직임이 정확하진 않지만 자연스럽게 움직임



